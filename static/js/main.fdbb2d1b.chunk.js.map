{"version":3,"sources":["redux/contact-form/contact-form-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/ContactList/ContactList.container.js","components/Filter/Filter.js","App.js","redux/contact-form/contact-form-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","removeContact","changeFilter","connect","dispatch","onAddContact","data","contactFormActions","useState","setName","setNumber","nameInputId","numberInputId","handleChangeForm","e","target","value","resetForm","onSubmit","preventDefault","trim","alert","type","placeholder","onChange","pattern","title","ContactListItem","onRemove","onClick","ContactsList","contacts","length","map","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","items","state","App","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactFormReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.fdbb2d1b.chunk.js","sourcesContent":["import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contact-form/Add', ({ name, number }) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst removeContact = createAction('contact-form/Remove');\n\nconst changeFilter = createAction('contact-form/changeFilter');\n\nexport default { addContact, removeContact, changeFilter };\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport contactFormActions from '../../redux/contact-form/contact-form-actions';\nimport PropTypes from 'prop-types';\n\nimport shortid from 'shortid';\n\nconst ContactForm = ({ onAddContact }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChangeForm = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n\n    if ((!name || name.trim() === '') && (!number || number.trim() === '')) {\n      alert('Fill in the fields \"Name\" and \"Number\"');\n      return;\n    }\n\n    if (!name || name.trim() === '') {\n      alert('Field \"Name\" is empty');\n      return;\n    }\n\n    if (!number || number.trim() === '') {\n      alert('Field \"Number\" is empty');\n      return;\n    }\n\n    onAddContact({ name, number });\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChangeForm}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        value={number}\n        onChange={handleChangeForm}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: data => dispatch(contactFormActions.addContact(data)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li>\n      {name}: {number} <button onClick={() => onRemove(id)}>delete</button>\n    </li>\n  );\n};\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return <p>There are no contacts in the list</p>;\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onRemove={() => onRemove(id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import { connect } from 'react-redux';\nimport contactFormActions from '../../redux/contact-form/contact-form-actions.js';\nimport ContactsList from './ContactList.js';\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemove: id => dispatch(contactFormActions.removeContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactFormActions from '../../redux/contact-form/contact-form-actions';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n      placeholder=\"Enter name for Search\"\n    />\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactFormActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactList';\nimport Filter from './components/Filter';\n\nconst App = () => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactsList />\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contact-form-actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.removeContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactFormReducer from './contact-form/contact-form-reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = getDefaultMiddleware => [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactFormReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}