{"version":3,"sources":["redux/contact-form/contact-form-types.js","redux/contact-form/contact-form-actions.js","components/ContactForm/ContactForm.js","App.js","hooks/useLocalStorage.js","redux/contact-form/contact-form-reducer.js","redux/store.js","index.js"],"names":["addContact","name","number","types","payload","id","shortid","generate","connect","dispatch","onAddContact","data","contactFormActions","useState","setName","setNumber","nameInputId","numberInputId","handleChangeForm","e","target","value","resetForm","onSubmit","preventDefault","type","placeholder","onChange","pattern","title","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","combineReducers","items","ADD","filter","rootReducer","contact","contactFormReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,EACR,mBCWQ,GAAEA,WATE,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,MAAuB,CACxCC,MAAOA,EACPC,QAAS,CACPC,GAAIC,IAAQC,WACZN,OACAC,a,OC0EWM,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCC,aAAc,SAAAC,GAAI,OAAIF,EAASG,EAAmBZ,WAAWW,QAGhDH,EA3EK,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACrB,EAAwBG,mBAAS,IAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOX,EAAP,KAAea,EAAf,KAEMC,EAAcV,IAAQC,WACtBU,EAAgBX,IAAQC,WAExBW,EAAmB,SAAAC,GACvB,MAAwBA,EAAEC,OAAlBnB,EAAR,EAAQA,KAAMoB,EAAd,EAAcA,MAEd,OAAQpB,GACN,IAAK,OACHa,EAAQO,GACR,MAEF,IAAK,SACHN,EAAUM,GACV,MAEF,QACE,SAeAC,EAAY,WAChBR,EAAQ,IACRC,EAAU,KAGZ,OACE,uBAAMQ,SAjBiB,SAAAJ,GACvBA,EAAEK,iBACFd,EAAa,CAAET,OAAMC,YAEfD,GAAQC,GAAYD,IAASC,GAInCoB,KASA,UACE,uBACEjB,GAAIW,EACJS,KAAK,OACLxB,KAAK,OACLyB,YAAY,aACZL,MAAOpB,EACP0B,SAAUT,EACVU,QAAQ,yHACRC,MAAM,ocAER,uBACExB,GAAIY,EACJQ,KAAK,MACLxB,KAAK,SACLyB,YAAY,qBACZL,MAAOnB,EACPyB,SAAUT,EACVU,QAAQ,yFACRC,MAAM,kiBAER,wBAAQJ,KAAK,SAAb,+BCSSK,EAxEH,WACV,MCLa,SAAyBC,EAAKC,GAC3C,MAA0BnB,oBACxB,kCAAMoB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQN,WAA7C,QAAsDC,KADxD,mBAAOM,EAAP,KAAcC,EAAd,KAQA,OAJAC,qBAAU,WACRL,OAAOC,aAAaK,QAAQV,EAAKE,KAAKS,UAAUJ,MAC/C,CAACP,EAAKO,IAEF,CAACA,EAAOC,GDJiBI,CAAgB,WAAY,IAA5D,mBACA,GADA,UAC4B9B,mBAAS,KAArC,6BAmDA,OACE,qCACE,2CACA,cAAC,EAAD,IAEA,8C,uBE/CS+B,4BAAgB,CAC7BC,MAfY,WAAoC,IAAnCP,EAAkC,uDAA1B,GAA0B,yCAApBb,EAAoB,EAApBA,KAAMrB,EAAc,EAAdA,QACjC,OAAQqB,GACN,KAAKtB,EAAM2C,IACT,MAAM,GAAN,mBAAWR,GAAX,CAAkBlC,IAEpB,QACE,OAAOkC,IAUXS,OANa,WAAyB,IAAxBT,EAAuB,uDAAf,GACtB,OAAOA,KCVHU,EAAcJ,0BAAgB,CAClCK,QAASC,IAKIC,EAFDC,sBAAYJ,EAAaK,iC,MCDvCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,W","file":"static/js/main.dc078c8a.chunk.js","sourcesContent":["export default {\n  ADD: 'contact-form/Add',\n  REMOVE: 'contact-form/Remove',\n  CHANGE_FILTER: 'contact-form/changeFilter',\n};\n","import shortid from 'shortid';\nimport types from './contact-form-types';\n\nconst addContact = ({ name, number }) => ({\n  types: types.ADD,\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n});\n\nexport default { addContact };\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport contactFormActions from '../../redux/contact-form/contact-form-actions';\nimport PropTypes from 'prop-types';\n\nimport shortid from 'shortid';\n\nconst ContactForm = ({ onAddContact }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChangeForm = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    onAddContact({ name, number });\n\n    if ((!name && number) || (name && !number)) {\n      return;\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChangeForm}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        value={number}\n        onChange={handleChangeForm}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\n// ContactForm.propTypes = {\n//   onAddContact: PropTypes.func.isRequired,\n// };\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: data => dispatch(contactFormActions.addContact(data)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import React, { useState } from 'react';\nimport useLocalStorage from './hooks/useLocalStorage';\nimport ContactForm from './components/ContactForm';\nimport ContactsList from './components/ContactList';\nimport Filter from './components/Filter';\n\nconst App = () => {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  // const handleAddContact = (name, number) => {\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n\n  //   if (contacts.find(contact => contact.name === name)) {\n  //     alert(`${name} is already in contacts`);\n  //     return;\n  //   }\n\n  //   if (contacts.find(contact => contact.number === number)) {\n  //     alert(`Number ${number} is already in contacts`);\n  //     return;\n  //   }\n\n  //   if ((!name || name.trim() === '') && (!number || number.trim() === '')) {\n  //     alert('Fill in the fields \"Name\" and \"Number\"');\n  //     return;\n  //   }\n\n  //   if (!name || name.trim() === '') {\n  //     alert('Field \"Name\" is empty');\n  //     return;\n  //   }\n\n  //   if (!number || number.trim() === '') {\n  //     alert('Field \"Number\" is empty');\n  //     return;\n  //   }\n  //   setContacts(prevContacts => [contact, ...prevContacts]);\n  // };\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const handleRemoveContact = id => {\n    setContacts(() => contacts.filter(contact => contact.id !== id));\n  };\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      {/* <Filter value={filter} onChange={changeFilter} /> */}\n      {/* {contacts.length === 0 ? (\n        <p>There are no contacts in the list</p>\n      ) : (\n        <ContactsList\n          contacts={getVisibleContacts()}\n          onRemove={handleRemoveContact}\n        />\n      )} */}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import { combineReducers } from 'redux';\nimport types from './contact-form-actions';\n\nconst items = (state = [], { type, payload }) => {\n  switch (type) {\n    case types.ADD:\n      return [...state, payload];\n\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = '', action) => {\n  return state;\n};\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport contactFormReducer from './contact-form/contact-form-reducer';\n\nconst rootReducer = combineReducers({\n  contact: contactFormReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}